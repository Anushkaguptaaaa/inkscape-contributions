--- src/ui/dialog/styledialog.cpp	(before formatting)
+++ src/ui/dialog/styledialog.cpp	(after formatting)
@@ -180,8 +180,8 @@
     const_iterator iter = unconstThis->get_iter(path);
     if (iter) {
         Gtk::TreeModel::Row row = *iter;
-        bool is_draggable      = row[_styledialog->_mColumns._colType] == SELECTOR ||
-                                 row[_styledialog->_mColumns._colType] == UNHANDLED;
+        bool is_draggable =
+            row[_styledialog->_mColumns._colType] == SELECTOR || row[_styledialog->_mColumns._colType] == UNHANDLED;
         return is_draggable;
     }
     return Gtk::TreeStore::row_draggable_vfunc(path);
@@ -252,7 +252,7 @@
     int addCol = _treeView.append_column("", *addRenderer) - 1;
     Gtk::TreeViewColumn *col = _treeView.get_column(addCol);
     if ( col ) {
-        col->add_attribute( addRenderer->property_icon(), _mColumns._colType );
+        col->add_attribute(addRenderer->property_icon(), _mColumns._colType);
     }
     _treeView.append_column("CSS Selector", _mColumns._colSelector);
     _treeView.set_expander_column(*(_treeView.get_column(1)));
@@ -291,11 +291,9 @@
         sigc::mem_fun(*this, &StyleDialog::_buttonEventsSelectObjs),
         false);
 
-    _treeView.signal_row_expanded().connect(
-        sigc::mem_fun(*this, &StyleDialog::_rowExpand));
-
-    _treeView.signal_row_collapsed().connect(
-        sigc::mem_fun(*this, &StyleDialog::_rowCollapse));
+    _treeView.signal_row_expanded().connect(sigc::mem_fun(*this, &StyleDialog::_rowExpand));
+
+    _treeView.signal_row_collapsed().connect(sigc::mem_fun(*this, &StyleDialog::_rowCollapse));
 
     // Document & Desktop
     _desktop_changed_connection = _desktopTracker.connectDesktopChanged(
@@ -438,12 +436,12 @@
         _updating = false;
         return;
     }
-    std::vector<std::pair<Glib::ustring, bool> > expanderstatus;
-    for (unsigned i = 0; i < tokens.size()-1; i += 2) {
+    std::vector<std::pair<Glib::ustring, bool>> expanderstatus;
+    for (unsigned i = 0; i < tokens.size() - 1; i += 2) {
         Glib::ustring selector = tokens[i];
         REMOVE_SPACES(selector); // Remove leading/trailing spaces
-        for (auto& row: _store->children()) {
-            Glib::ustring selectorold = row[_mColumns._colSelector]; 
+        for (auto &row : _store->children()) {
+            Glib::ustring selectorold = row[_mColumns._colSelector];
             if (selectorold == selector) {
                 expanderstatus.push_back(std::make_pair(selector, row[_mColumns._colExpand]));
             }
@@ -457,9 +455,9 @@
         REMOVE_SPACES(selector); // Remove leading/trailing spaces
         std::vector<Glib::ustring> tokensplus = Glib::Regex::split_simple("[,]+", selector);
         coltype colType = SELECTOR;
-        for (auto tok : tokensplus){
+        for (auto tok : tokensplus) {
             REMOVE_SPACES(tok);
-            if (tok.find(" ") != -1){
+            if (tok.find(" ") != -1) {
                 colType = UNHANDLED;
             }
         }
@@ -476,40 +474,40 @@
         }
         REMOVE_SPACES(properties);
         bool colExpand = false;
-        for (auto rowstatus: expanderstatus) {
+        for (auto rowstatus : expanderstatus) {
             if (selector == rowstatus.first) {
                 colExpand = rowstatus.second;
             }
         }
         Gtk::TreeModel::Row row = *(_store->append());
         row[_mColumns._colSelector]   = selector;
-        row[_mColumns._colExpand]     = colExpand;
-        row[_mColumns._colType]       = colType;
+        row[_mColumns._colExpand] = colExpand;
+        row[_mColumns._colType] = colType;
         row[_mColumns._colObj]        = objVec;
         row[_mColumns._colProperties] = properties;
-        if (colType ==  SELECTOR) {
+        if (colType == SELECTOR) {
             // Add as children, objects that match selector.
-            for (auto& obj: objVec) {
+            for (auto &obj : objVec) {
                 Gtk::TreeModel::Row childrow = *(_store->append(row->children()));
-                childrow[_mColumns._colSelector]   = "#" + Glib::ustring(obj->getId());
-                childrow[_mColumns._colExpand]    = false;
+                childrow[_mColumns._colSelector] = "#" + Glib::ustring(obj->getId());
+                childrow[_mColumns._colExpand] = false;
                 childrow[_mColumns._colType] = OBJECT;
-                childrow[_mColumns._colObj]        = std::vector<SPObject *>(1, obj);
-                childrow[_mColumns._colProperties] = "";  // Unused
+                childrow[_mColumns._colObj] = std::vector<SPObject *>(1, obj);
+                childrow[_mColumns._colProperties] = ""; // Unused
             }
         }
     }
     _updating = false;
 }
 
-void StyleDialog::_rowExpand(const Gtk::TreeModel::iterator& iter, const Gtk::TreeModel::Path& path)
+void StyleDialog::_rowExpand(const Gtk::TreeModel::iterator &iter, const Gtk::TreeModel::Path &path)
 {
     g_debug("StyleDialog::_row_expand()");
     Gtk::TreeModel::Row row = *iter;
     row[_mColumns._colExpand] = true;
 }
 
-void StyleDialog::_rowCollapse(const Gtk::TreeModel::iterator& iter, const Gtk::TreeModel::Path& path)
+void StyleDialog::_rowCollapse(const Gtk::TreeModel::iterator &iter, const Gtk::TreeModel::Path &path)
 {
     g_debug("StyleDialog::_row_collapse()");
     Gtk::TreeModel::Row row = *iter;
@@ -529,15 +527,14 @@
     Glib::ustring styleContent;
     for (auto& row: _store->children()) {
         Glib::ustring selector = row[_mColumns._colSelector];
-/*
-        REMOVE_SPACES(selector);
-/*         size_t len = selector.size();
-        if(selector[len-1] == ','){
-            selector.erase(len-1);
-        }
-        row[_mColumns._colSelector] =  selector; */
-        styleContent = styleContent + selector +
-            " { " + row[_mColumns._colProperties] + " }\n";
+        /*
+                REMOVE_SPACES(selector);
+        /*         size_t len = selector.size();
+                if(selector[len-1] == ','){
+                    selector.erase(len-1);
+                }
+                row[_mColumns._colSelector] =  selector; */
+        styleContent = styleContent + selector + " { " + row[_mColumns._colProperties] + " }\n";
     }
     // We could test if styleContent is empty and then delete the style node here but there is no
     // harm in keeping it around ...
@@ -643,15 +640,15 @@
             Glib::ustring className = tokens[0];
             className.erase(0,1);
             Inkscape::Selection* selection = getDesktop()->getSelection();
-            std::vector<SPObject *> sel_obj( selection->objects().begin(),
-                                            selection->objects().end() );
-            _insertClass( sel_obj, className );
-            std::vector<SPObject *> objVec = _getObjVec( selector );;
-            for (auto& obj: sel_obj) {
-
-                Glib::ustring id = (obj->getId()?obj->getId():"");
+            std::vector<SPObject *> sel_obj(selection->objects().begin(), selection->objects().end());
+            _insertClass(sel_obj, className);
+            std::vector<SPObject *> objVec = _getObjVec(selector);
+            ;
+            for (auto &obj : sel_obj) {
+
+                Glib::ustring id = (obj->getId() ? obj->getId() : "");
                 bool found = false;
-                for (auto& obj: objVec) {
+                for (auto &obj : objVec) {
                     if (id == obj->getId()) {
                         found = true;
                         break;
@@ -661,16 +658,16 @@
                 if (!found) {
                     // Update row
                     objVec.push_back(obj); // Adding to copy so need to update tree
-                    row[_mColumns._colObj]      = objVec;
+                    row[_mColumns._colObj] = objVec;
                     row[_mColumns._colExpand] = true;
-                
+
                     // Update row
                     Gtk::TreeModel::Row childrow = *(_store->append(row->children()));
-                    childrow[_mColumns._colSelector]   = "#" + Glib::ustring(obj->getId());
+                    childrow[_mColumns._colSelector] = "#" + Glib::ustring(obj->getId());
                     childrow[_mColumns._colExpand] = false;
                     childrow[_mColumns._colType] = OBJECT;
-                    childrow[_mColumns._colObj]        = std::vector<SPObject *>(1, obj);
-                    childrow[_mColumns._colProperties] = "";  // Unused
+                    childrow[_mColumns._colObj] = std::vector<SPObject *>(1, obj);
+                    childrow[_mColumns._colProperties] = ""; // Unused
                 }
             }
         }
@@ -700,7 +697,7 @@
         if (iter) {
             Gtk::TreeModel::Row parent = *iter;
             Glib::ustring selector = parent[_mColumns._colSelector];
-            REMOVE_SPACES(selector); 
+            REMOVE_SPACES(selector);
             if (selector[0] == '#') {
                 // 'id' selector... remove selected object's id's to list.
 
@@ -710,16 +707,16 @@
                     selector.erase(i, objectLabel.length());
                 }
                 // Erase any comma/space
-                REMOVE_SPACES(selector); 
+                REMOVE_SPACES(selector);
                 if (i != Glib::ustring::npos && selector[i] == ',') {
                     selector.erase(i, 1);
                 }
                 if (i != Glib::ustring::npos && selector[i] == ' ') {
                     selector.erase(i, 1);
                 }
-                REMOVE_SPACES(selector); 
-                if (selector[selector.size()-1] == ',') {
-                    selector.erase(selector.size()-1, 1);
+                REMOVE_SPACES(selector);
+                if (selector[selector.size() - 1] == ',') {
+                    selector.erase(selector.size() - 1, 1);
                 }
 
                 // Update store
@@ -741,7 +738,7 @@
                 // Get first class (split on white space or comma)
                 std::vector<Glib::ustring> tokens = Glib::Regex::split_simple("[,\\s]+", selector);
                 Glib::ustring className = tokens[0];
-                className.erase(0,1);
+                className.erase(0, 1);
                 // Erase class name from 'class' attribute.
                 Glib::ustring classAttr = objVec[0]->getRepr()->attribute("class");
                 auto i = classAttr.find( className );
@@ -846,7 +843,7 @@
 void StyleDialog::_selectObjects(int eventX, int eventY)
 {
     g_debug("StyleDialog::_selectObjects: %d, %d", eventX, eventY);
-    
+
     getDesktop()->selection->clear();
     Gtk::TreeViewColumn *col = _treeView.get_column(1);
     Gtk::TreeModel::Path path;
@@ -895,7 +892,8 @@
     textDialogPtr->add_button(_("Add"),    Gtk::RESPONSE_OK);
 
     Gtk::Entry *textEditPtr = manage ( new Gtk::Entry() );
-    textEditPtr->signal_activate().connect(sigc::bind<Gtk::Dialog *>(sigc::mem_fun(*this, &StyleDialog::_closeDialog), textDialogPtr));
+    textEditPtr->signal_activate().connect(
+        sigc::bind<Gtk::Dialog *>(sigc::mem_fun(*this, &StyleDialog::_closeDialog), textDialogPtr));
     textDialogPtr->get_content_area()->pack_start(*textEditPtr, Gtk::PACK_SHRINK);
 
     Gtk::Label *textLabelPtr = manage ( new Gtk::Label(
@@ -946,15 +944,13 @@
          */
         selectorValue = textEditPtr->get_text();
         Glib::ustring firstWord = selectorValue.substr(0, selectorValue.find_first_of(" >+~"));
-        if (firstWord != selectorValue ) {
+        if (firstWord != selectorValue) {
             handled = false;
         }
         del->set_sensitive(true);
 
-        if (selectorValue[0] == '.' ||
-            selectorValue[0] == '#' ||
-            selectorValue[0] == '*' ||
-            SPAttributeRelSVG::isSVGElement( selectorValue ) ) {
+        if (selectorValue[0] == '.' || selectorValue[0] == '#' || selectorValue[0] == '*' ||
+            SPAttributeRelSVG::isSVGElement(selectorValue)) {
             invalid = false;
         } else {
             textLabelPtr->show();
@@ -967,13 +963,13 @@
     if (selectorValue[0] == '.' && handled) {
         std::vector<Glib::ustring> tokens = Glib::Regex::split_simple("[,\\.\\s]+", selectorValue);
         Glib::ustring originClassName = tokens[0];
-        originClassName.erase(0,1);
+        originClassName.erase(0, 1);
         std::vector<Glib::ustring> classes = Glib::Regex::split_simple("[\\.]+", originClassName);
         if (classes.length == 1)
-            _insertClass( objVec, classes[0]);
-        } else {
-            handled = false;
-        }
+            _insertClass(objVec, classes[0]);
+    } else {
+        handled = false;
+    }
     }
 
     // Generate a new object vector (we could have an element selector,
@@ -984,17 +980,17 @@
     Gtk::TreeModel::Row row = *(_store->append());
     row[_mColumns._colSelector] = selectorValue;
     row[_mColumns._colExpand] = true;
-    row[_mColumns._colType] = handled?SELECTOR: UNHANDLED;
+    row[_mColumns._colType] = handled ? SELECTOR : UNHANDLED;
     row[_mColumns._colObj] = objVec;
 
     // Add as children objects that match selector.
     if (handled) {
-        for (auto& obj: objVec) {
+        for (auto &obj : objVec) {
             Gtk::TreeModel::Row childrow = *(_store->append(row->children()));
-            childrow[_mColumns._colSelector]   = "#" + Glib::ustring(obj->getId());
+            childrow[_mColumns._colSelector] = "#" + Glib::ustring(obj->getId());
             childrow[_mColumns._colExpand] = false;
             childrow[_mColumns._colType] = OBJECT;
-            childrow[_mColumns._colObj]        = std::vector<SPObject *>(1, obj);
+            childrow[_mColumns._colObj] = std::vector<SPObject *>(1, obj);
         }
     }
 
@@ -1002,10 +998,7 @@
     _writeStyleElement();
 }
 
-void StyleDialog::_closeDialog(Gtk::Dialog *textDialogPtr)
-{
-    textDialogPtr->response(Gtk::RESPONSE_OK);
-}
+void StyleDialog::_closeDialog(Gtk::Dialog *textDialogPtr) { textDialogPtr->response(Gtk::RESPONSE_OK); }
 
 /**
  * @brief StyleDialog::_delSelector
@@ -1021,9 +1014,9 @@
     Gtk::TreeModel::iterator iter = refTreeSelection->get_selected();
     if (iter) {
         Gtk::TreeModel::Row row = *iter;
-         if(!row.children().empty()) {
+        if (!row.children().empty()) {
             return;
-        } 
+        }
         _updating = true;
         _store->erase(iter);
         _updating = false;
@@ -1175,7 +1168,8 @@
         int y = static_cast<int>(event->y);
         _selectObjects(x, y);
     }
-    _updating = false;}
+    _updating = false;
+}
 
 
 /**
@@ -1199,7 +1193,7 @@
     if (!selection->isEmpty()) {
         obj = selection->objects().back();
     }
-    for(auto row : children) {
+    for (auto row : children) {
         std::vector<SPObject *> objVec = row[_mColumns._colObj];
         if (obj) {
             for (auto & i : objVec) {
@@ -1208,8 +1202,8 @@
                 }
             }
         }
-        if(row[_mColumns._colExpand]) {
-            _treeView.expand_to_path (Gtk::TreePath(row));
+        if (row[_mColumns._colExpand]) {
+            _treeView.expand_to_path(Gtk::TreePath(row));
         }
     }
 }
--- src/ui/dialog/styledialog.h	(before formatting)
+++ src/ui/dialog/styledialog.h	(after formatting)
@@ -65,7 +65,7 @@
     void _nodeRemoved( Inkscape::XML::Node &repr );
     void _nodeChanged( Inkscape::XML::Node &repr );
     // Data structure
-    enum coltype {OBJECT,SELECTOR,UNHANDLED};
+    enum coltype { OBJECT, SELECTOR, UNHANDLED };
     class ModelColumns : public Gtk::TreeModel::ColumnRecord {
     public:
         ModelColumns() {
@@ -76,8 +76,8 @@
             add(_colProperties);
         }
         Gtk::TreeModelColumn<Glib::ustring> _colSelector;       // Selector or matching object id.
-        Gtk::TreeModelColumn<bool> _colExpand;       // Open/Close store row.
-        Gtk::TreeModelColumn<gint> _colType;               // Selector row or child object row.
+        Gtk::TreeModelColumn<bool> _colExpand;                  // Open/Close store row.
+        Gtk::TreeModelColumn<gint> _colType;                    // Selector row or child object row.
         Gtk::TreeModelColumn<std::vector<SPObject *> > _colObj; // List of matching objects.
         Gtk::TreeModelColumn<Glib::ustring> _colProperties;     // List of properties.
     };
@@ -145,8 +145,8 @@
     void _handleDocumentReplaced(SPDesktop* desktop, SPDocument *document);
     void _handleDesktopChanged(SPDesktop* desktop);
     void _handleSelectionChanged();
-    void _rowExpand(const Gtk::TreeModel::iterator& iter, const Gtk::TreeModel::Path& path);
-    void _rowCollapse(const Gtk::TreeModel::iterator& iter, const Gtk::TreeModel::Path& path);
+    void _rowExpand(const Gtk::TreeModel::iterator &iter, const Gtk::TreeModel::Path &path);
+    void _rowCollapse(const Gtk::TreeModel::iterator &iter, const Gtk::TreeModel::Path &path);
     void _closeDialog(Gtk::Dialog *textDialogPtr);
 
     DesktopTracker _desktopTracker;
