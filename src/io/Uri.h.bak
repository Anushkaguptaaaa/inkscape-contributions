/**
 * \file
 * \brief Classes for representing and manipulating URIs as per RFC 2396.
 *
 * Authors:
 *   MenTaLguY <mental@rydia.net>
 *   Jon A. Cruz <jon@joncruz.org>
 *
 * Copyright (C) 2003 MenTaLguY
 *
 * Released under GNU GPL, read the file 'COPYING' for more information
 */

#ifndef INKSCAPE_URI_H
#define INKSCAPE_URI_H

#include <glibmm.h>
#include <exception>
#include <libxml/uri.h>
#include "BadUriException.h"

namespace Inkscape {

/** \brief Represents an URI as per RFC 2396. */
class URI {
public:
    URI(URI const &uri);
    explicit URI(Glib::ustring &preformed) throw(BadURIException);
    ~URI();

    bool                 isOpaque() const       { return _impl->isOpaque();       }
    bool                 isRelative() const     { return _impl->isRelative();     }
    bool                 isNetPath() const      { return _impl->isNetPath();      }
    bool                 isRelativePath() const { return _impl->isRelativePath(); }
    bool                 isAbsolutePath() const { return _impl->isAbsolutePath(); }
    const Glib::ustring  getScheme() const      { return _impl->getScheme();      }
    const Glib::ustring  getPath() const        { return _impl->getPath();        }
    const Glib::ustring  getQuery() const       { return _impl->getQuery();       }
    const Glib::ustring  getFragment() const    { return _impl->getFragment();    }
    const Glib::ustring  getOpaque() const      { return _impl->getOpaque();      }
    const Glib::ustring  toString() const       { return _impl->toString();       }
    Glib::ustring        toNativeFilename() const throw(BadURIException);

    static URI           fromUtf8( Glib::ustring  &utf8Str)            throw (BadURIException);
    static URI           from_native_filename(Glib::ustring &fileName) throw (BadURIException);
    static Glib::ustring to_native_filename(Glib::ustring &uriName)    throw (BadURIException);


    URI &operator=(URI const &uri);

private:
    class Impl {
    public:
        static Impl *create(xmlURIPtr uri);
        void reference();
        void unreference();

        bool isOpaque() const;
        bool isRelative() const;
        bool isNetPath() const;
        bool isRelativePath() const;
        bool isAbsolutePath() const;
        Glib::ustring getScheme() const;
        Glib::ustring getPath() const;
        Glib::ustring getQuery() const;
        Glib::ustring getFragment() const;
        Glib::ustring getOpaque() const;
        Glib::ustring toString() const;
    private:
        Impl(xmlURIPtr uri);
        ~Impl();
        int _refcount;
        xmlURIPtr _uri;
    };
    Impl *_impl;
};

}; /* namespace Inkscape */

#endif

/*
  Local Variables:
  mode:c++
  c-file-style:"stroustrup"
  c-file-offsets:((innamespace . 0)(inline-open . 0))
  indent-tabs-mode:nil
  fill-column:99
  End:
*/
// vim: filetype=c++:expandtab:shiftwidth=4:tabstop=8:softtabstop=4 :
